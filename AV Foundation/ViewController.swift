//
//  ViewController.swift
//  AV Foundation

//

import UIKit
import Photos
import Alamofire
import AVFoundation
import AFNetworking
class ViewController: UIViewController {
    
    var spinner = UIActivityIndicatorView(activityIndicatorStyle: .whiteLarge)
    var loadingView: UIView = UIView()
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    @IBOutlet fileprivate var captureSubPreview: UIView!
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    
    let cameraController = CameraController()
  

    
    
    override var prefersStatusBarHidden: Bool { return true }
    
}

extension ViewController {
    override func viewDidLoad()  {
        
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        styleCaptureButton()
        configureCameraController()
//         let image = UIImage(named: "pexels-photo-240222")
//        checkApi(image: image!)
        self.captureSubPreview.layer.borderColor = UIColor.black.cgColor
        self.captureSubPreview.layer.borderWidth = 2
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
            
        }
        
}
}

extension ViewController {
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
      
    }
    
    @IBAction func captureImage(_ sender: UIButton) {
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            self.checkApi(image: image)
         
            }
        }
    
   func checkApi(image : UIImage)
    {
        showActivityIndicator()
        self.captureButton.isUserInteractionEnabled = false

        let params = ["type": "image/jpg"] as? Dictionary<String, String>

        var request = URLRequest(url: URL(string: "https://8vhrbyqq04.execute-api.us-east-1.amazonaws.com/staging/api/v1/file/scooter/upload")!)
        request.httpMethod = "POST"
        request.httpBody = try? JSONSerialization.data(withJSONObject: params ?? ["":""] , options: [])
        request.addValue("image/jpg", forHTTPHeaderField: "Content-Type")

        let session = URLSession.shared
        let task = session.dataTask(with: request, completionHandler: { data, response, error -> Void in
            print(response!)
            do {
                let json = try JSONSerialization.jsonObject(with: data!) as!  [String : AnyObject]
           
                let baseURL = json["url"] as! String
                let baseKey = json["key"] as! String
                print(baseURL)
                print(baseKey)
                
                self.uploadToS3(url: baseURL, Key: baseKey, image: image)

                
            } catch {
                print(error.localizedDescription)
                
            }
        })

        task.resume()
    }
    
//func checkApiS3(image : UIImage, baseURL : String, baseKey : String)
// {
//
//     guard let data = UIImageJPEGRepresentation(image, 0.9) else {
//           return
//         }
//
//         Alamofire.upload(multipartFormData: { (form) in
//           form.append(data, withName: "file", fileName: "file.jpg", mimeType: "image/jpg")
//         }, to: baseURL,method: .put, encodingCompletion: { result in
//           switch result {
//           case .success(let upload, _, _):
//             upload.responseString { response in
//
//                 self.mlApicheck(image: baseURL, Key: baseKey)
//
//
//             }
//           case .failure(let encodingError):
//               print(encodingError.localizedDescription)
//
//           }
//         })
//
// }

    func mlApicheck(image : String, Key: String)
 {
  
     let params = ["image_url": "https://chex-ai-uploads.s3.amazonaws.com/uploads/1/mcB9VbNmOc-HUhLXIlibC"] as? Dictionary<String, String>
     print(params ?? ["":""])

     var request = URLRequest(url: URL(string: "https://8vhrbyqq04.execute-api.us-east-1.amazonaws.com/staging/api/v1/staging/scooter-parking?key=dpj9hlzk365aomivxegn")!)
     print(request)
     
     request.httpMethod = "POST"
     request.httpBody = try? JSONSerialization.data(withJSONObject: params ?? ["":""] , options: [])
     request.addValue("application/json", forHTTPHeaderField: "Content-Type")

     let session = URLSession.shared
     let task = session.dataTask(with: request, completionHandler: { data, response, error -> Void in
         print(response!)
         do {
             self.hideActivityIndicator()
             let json = try JSONSerialization.jsonObject(with: data!) as!  [String : AnyObject]
        print(json)
             let baseData = json["data"] as! [String : AnyObject]
             let idealStatus = baseData["ideal_status"] as! Int
             let baseMeta = json["meta"] as! [String : AnyObject]
             let baseDetection = baseMeta["detection"] as! [String : AnyObject]
             let parkingStatus = baseDetection["parking_status"] as! Int
             
             let scooterPercentage = String(describing: baseDetection["scooter_percentage"] )
             
             DispatchQueue.main.async {
             let alert = UIAlertController(title: "Success", message: "Parking Status: \(parkingStatus) And Scooter Percentage: 1.5)", preferredStyle: UIAlertControllerStyle.alert)
             alert.addAction(UIAlertAction(title: "Okay", style: UIAlertActionStyle.default, handler: nil))
             self.present(alert, animated: true, completion: nil)
            
            self.captureButton.isUserInteractionEnabled = true
             }
             
         } catch {
             print(error.localizedDescription)
             self.hideActivityIndicator()
             self.captureButton.isUserInteractionEnabled = true

         }
     })

     task.resume()
 }
    
    
    func uploadToS3(url: String, Key: String, image : UIImage){
        
           let manager = AFHTTPRequestOperationManager()
                       
         let FileURL = saveImageInDocumentDirectory(image: image, fileName: "image.png")
       
        print((FileURL ?? URL.self))
        
        let params : [String : Any] = ["body" : FileURL ?? URL.self]
        
                       let URL : NSURL = NSURL(string: url)!
           let req : NSURLRequest = NSURLRequest(url: URL as URL)
               let fileURL = FileURL// change your image url
        
        
        let operation = manager.post(url, parameters: nil, constructingBodyWith: { (data: AFMultipartFormData!) -> Void in
              do
               {
                   _ =  try data.appendPart(withFileURL: fileURL, name: "uploaded_file", fileName: "image.png", mimeType: "image/png")
               }
               catch{
                   
               }
                }, success: { (operation, responseObject) -> Void in
                    print(responseObject)
                    self.mlApicheck(image: "", Key: Key)
                    
                }) { (operation, error) -> Void in
                    print(error)
                    self.mlApicheck(image: "", Key: Key)
                }

           operation?.start()
        
        

   }
func uploadImage(paramName: String, fileName: String, image: UIImage) {
    let url = URL(string: "http://api-host-name/v1/api/uploadfile/single")

    // generate boundary string using a unique per-app string
    let boundary = UUID().uuidString

    let session = URLSession.shared

    // Set the URLRequest to POST and to the specified URL
    var urlRequest = URLRequest(url: url!)
    urlRequest.httpMethod = "POST"

    // Set Content-Type Header to multipart/form-data, this is equivalent to submitting form data with file upload in a web browser
    // And the boundary is also set here
    urlRequest.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")

    var data = Data()

    // Add the image data to the raw http request data
    data.append("\r\n--\(boundary)\r\n".data(using: .utf8)!)
    data.append("Content-Disposition: form-data; name=\"\(paramName)\"; filename=\"\(fileName)\"\r\n".data(using: .utf8)!)
    data.append("Content-Type: image/png\r\n\r\n".data(using: .utf8)!)
    data.append(UIImagePNGRepresentation(image)!)

    data.append("\r\n--\(boundary)--\r\n".data(using: .utf8)!)

    // Send a POST request to the URL, with the data we created earlier
    session.uploadTask(with: urlRequest, from: data, completionHandler: { responseData, response, error in
        if error == nil {
            let jsonData = try? JSONSerialization.jsonObject(with: responseData!, options: .allowFragments)
            if let json = jsonData as? [String: Any] {
                print(json)
            }
        }
    }).resume()
}
}
public func saveImageInDocumentDirectory(image: UIImage, fileName: String) -> URL? {

        let documentsUrl = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!;
        let fileURL = documentsUrl.appendingPathComponent(fileName)
        if let imageData = UIImagePNGRepresentation(image) {
            try? imageData.write(to: fileURL, options: .atomic)
            return fileURL
        }
        return nil
    }

public func loadImageFromDocumentDirectory(fileName: String) -> UIImage? {

        let documentsUrl = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!;
        let fileURL = documentsUrl.appendingPathComponent(fileName)
        do {
            let imageData = try Data(contentsOf: fileURL)
            return UIImage(data: imageData)
        } catch {}
        return nil
    }
